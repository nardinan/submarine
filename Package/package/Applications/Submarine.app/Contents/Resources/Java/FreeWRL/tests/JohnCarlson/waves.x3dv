#X3D V3.0 utf8

PROFILE Immersive

META "created" "23 January 2005"
META "transcriber" "John Carlson"
META "description" "A fake simulation of something hitting a pool of water"
META "revised" "23 January 2005"
META "url" "http://coderextreme.net/x3d/waves.x3d"
META "filename" "waves.x3d"
META "generator" "manually written"
META "author" "John Carlson"

NavigationInfo {
      type ["EXAMINE","ANY"]
      transitionType ["ANIMATE"]
}
Viewpoint {
      orientation 0.0 -5.0 5.0 0.0
      position 0.0 5.0 20.0
      description "Pool of Water"
}
Group {
   children [DirectionalLight {
         direction -1.0 -1.0 -1.0
   }
Transform {
      children [Shape {
         appearance Appearance {
            material Material {
                  diffuseColor 0.0 0.5 1.0
            }

         }

         geometry DEF Wave IndexedFaceSet {
               creaseAngle 1.57
            coord DEF WaveCoordinates Coordinate {
            }

         }

      }
      ]
   }
DEF Clock TimeSensor {
         loop TRUE
         cycleInterval 20.0
   }
DEF WaveAnimate Script {
         inputOnly SFFloat set_fraction
         outputOnly MFVec3f coordinates1
         outputOnly MFInt32 coordIndexes1
         initializeOnly SFInt32 resolution 50

      url ["ecmascript:

function initialize() {
        generateCoordinates();

	// set coordinate indices
	var localcoordIndexes = new MFInt32();
        ci = 0;
        for ( i = 0; i < resolution-1; i++) {
     	  for ( j = 0; j < resolution-1; j++) {
	     localcoordIndexes[ci] = i*resolution+j;
	     localcoordIndexes[ci+1] = i*resolution+j+1;
	     localcoordIndexes[ci+2] = (i+1)*resolution+j+1;
	     localcoordIndexes[ci+3] = (i+1)*resolution+j;
	     localcoordIndexes[ci+4] = -1;
	     ci += 5;
	  }
        }
	// pick first frame
	set_fraction(0, 0);
        coordIndexes1 = localcoordIndexes;
}

// show current frame
function set_fraction(f, eventTime) {
    var localcoordinates = new MFVec3f();
    k = Math.round(f*20);
    for ( i = 0; i < resolution; i++) {
	for ( j = 0; j < resolution; j++) {
	    var cind = i*resolution+j;
	    var ind = k*resolution*resolution+cind;
	    localcoordinates[cind][0] = crd[ind][0];
	    localcoordinates[cind][1] = crd[ind][1];
	    localcoordinates[cind][2] = crd[ind][2];
	}
    }
    coordinates1 = localcoordinates;
}

function generateCoordinates() {
 	crd = new MFVec3f();
	for (k = 0; k <= 20; k++) {
	     // can't find a good example in my numerical analysis book,		     //so I'll just fake it
	     var f = k / 20.0;
	     var pi = 3.141592653;
	     var radius = 4 * pi;
	     var x = -radius;
	     var z = -radius;
	     delta = (2 * radius) / (resolution-1);
	     for ( i = 0; i < resolution; i++) {
		z = -radius;
		for ( j = 0; j < resolution; j++) {
			var ind = k*resolution*resolution+i*resolution+j;
			crd[ind][0] = x;
			crd[ind][1] = Math.sin(7*Math.sqrt((x*x+z*z)*(1-f)))/(1+(Math.sqrt(x*x+z*z)-f*radius)*(Math.sqrt(x*x+z*z)-f*radius))/(1+Math.sqrt(x*x+z*z)); 

			crd[ind][2] = z;
			z += delta;
		}
		x += delta;
	     }
	}
}"]
   }
   ]
}
ROUTE WaveAnimate.coordIndexes1 TO Wave.set_coordIndex
ROUTE WaveAnimate.coordinates1 TO WaveCoordinates.point
ROUTE Clock.fraction_changed TO WaveAnimate.set_fraction
