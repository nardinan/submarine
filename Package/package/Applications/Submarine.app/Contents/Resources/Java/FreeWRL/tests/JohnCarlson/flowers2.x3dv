#X3D V3.0 utf8

PROFILE Immersive

META "created" "23 January 2005"
META "transcriber" "John Carlson"
META "description" "2 random mathematical roses in spherical dimensions. rho = a + b * cos(c * theta) * cos(d * phi)"
META "revised" "23 January 2005"
META "url" "http://coderextreme.net/x3d/flowers2.x3d"
META "filename" "flowers2.x3d"
META "generator" "manually written"
META "author" "John Carlson"

NavigationInfo {
      type ["EXAMINE"]
}
Viewpoint {
      position 0.0 0.0 50.0
      description "Two mathematical orbitals"
}
Group {
   children [DirectionalLight {
         direction 1.0 1.0 1.0
   }
DEF OrbitTransform Transform {
         translation 8.0 0.0 0.0
      children [Shape {
         appearance Appearance {
            material Material {
                  diffuseColor 0.0 0.5 1.0
                  specularColor 0.0 0.5 1.0
            }

         }

         geometry DEF Orbit IndexedFaceSet {
               creaseAngle 1.57
            coord DEF OrbitCoordinates Coordinate {
            }

         }

      }
      ]
   }
DEF OrbitTransform2 Transform {
         translation -8.0 0.0 0.0
      children [Shape {
         appearance Appearance {
            material Material {
                  diffuseColor 1.0 0.5 0.0
                  specularColor 1.0 0.5 0.0
                  transparency 0.75
            }

         }

         geometry DEF Orbit2 IndexedFaceSet {
               creaseAngle 1.57
            coord DEF OrbitCoordinates2 Coordinate {
            }

         }

      }
      ]
   }
DEF Clock TimeSensor {
         loop TRUE
         cycleInterval 16.0
   }
DEF OrbitPath OrientationInterpolator {
         key [0.0 ,0.5 ,1.0]
         keyValue [1.0 0.0 0.0 0.0 ,1.0 0.0 0.0 3.14 ,1.0 0.0 0.0 6.28]
   }
DEF OrbitScript Script {
         inputOnly SFFloat set_fraction
         outputOnly MFVec3f coordinates
         outputOnly MFInt32 coordIndexes
      url ["ecmascript:

var e = 5;
var f = 5;
var g = 5;
var h = 5;

function initialize() {
     resolution = 100;
     var localci = new MFInt32();
     generateCoordinates(resolution);
     ci = 0;
     for ( i = 0; i < resolution-1; i++) {
     	for ( j = 0; j < resolution-1; j++) {
	     localci[ci] = i*resolution+j;
	     localci[ci+1] = i*resolution+j+1;
	     localci[ci+2] = (i+1)*resolution+j+1;
	     localci[ci+3] = (i+1)*resolution+j;
	     localci[ci+4] = -1;
	     ci += 5;
	}
    }
    coordIndexes = localci;
}

function generateCoordinates(resolution) {
     theta = 0.0;
     phi = 0.0;
     delta = (2 * 3.141592653) / (resolution-1);
     var localc = new MFVec3f();
     for ( i = 0; i < resolution; i++) {
     	for ( j = 0; j < resolution; j++) {
		rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);
		localc[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
		localc[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
		localc[i*resolution+j][2] = rho * Math.sin(phi);
		theta += delta;
	}
	phi += delta;
     }
     coordinates = localc;
}

function set_fraction(fraction, eventTime) {
	choice = Math.floor(Math.random() * 4);
	switch (choice) {
	case 0:
		e += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 1:
		f += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 2:
		g += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 3:
		h += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	}
	if (f < 1) {
		f = 10;
	}
	if (g < 1) {
		g = 4;
	}
	if (h < 1) {
		h = 4;
	}
	resolution = 100;
	generateCoordinates(resolution);
}"]
   }
DEF OrbitScript2 Script {
         inputOnly SFFloat set_fraction
         outputOnly MFVec3f coordinates
         outputOnly MFInt32 coordIndexes
      url ["ecmascript:

var e = 5;
var f = 5;
var g = 5;
var h = 5;

function initialize() {
     resolution = 100;
     var localci = new MFInt32();
     generateCoordinates(resolution);
     ci = 0;
     for ( i = 0; i < resolution-1; i++) {
     	for ( j = 0; j < resolution-1; j++) {
	     localci[ci] = i*resolution+j;
	     localci[ci+1] = i*resolution+j+1;
	     localci[ci+2] = (i+1)*resolution+j+1;
	     localci[ci+3] = (i+1)*resolution+j;
	     localci[ci+4] = -1;
	     ci += 5;
	}
    }
    coordIndexes = localci;
}

function generateCoordinates(resolution) {
     theta = 0.0;
     phi = 0.0;
     delta = (2 * 3.141592653) / (resolution-1);
     var localc = new MFVec3f();
     for ( i = 0; i < resolution; i++) {
     	for ( j = 0; j < resolution; j++) {
		rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);
		localc[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
		localc[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
		localc[i*resolution+j][2] = rho * Math.sin(phi);
		theta += delta;
	}
	phi += delta;
     }
     coordinates = localc;
}

function set_fraction(fraction, eventTime) {
	choice = Math.floor(Math.random() * 4);
	switch (choice) {
	case 0:
		e += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 1:
		f += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 2:
		g += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	case 3:
		h += Math.floor(Math.random() * 2) * 2 - 1;
		break;
	}
	if (f < 1) {
		f = 10;
	}
	if (g < 1) {
		g = 4;
	}
	if (h < 1) {
		h = 4;
	}
	resolution = 100;
	generateCoordinates(resolution);
}"]
   }
   ]
}
ROUTE OrbitScript.coordIndexes TO Orbit.set_coordIndex
ROUTE OrbitScript.coordinates TO OrbitCoordinates.point
ROUTE OrbitScript2.coordIndexes TO Orbit2.set_coordIndex
ROUTE OrbitScript2.coordinates TO OrbitCoordinates2.point
ROUTE Clock.fraction_changed TO OrbitScript.set_fraction
ROUTE Clock.fraction_changed TO OrbitScript2.set_fraction
ROUTE Clock.fraction_changed TO OrbitPath.set_fraction
ROUTE OrbitPath.value_changed TO OrbitTransform.rotation
ROUTE OrbitPath.value_changed TO OrbitTransform2.rotation
