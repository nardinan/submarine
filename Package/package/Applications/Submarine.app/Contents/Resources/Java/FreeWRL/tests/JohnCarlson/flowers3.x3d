<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN"
                     "http://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D profile="Immersive" version="3.0"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema-instance" xsd:noNamespaceSchemaLocation="http://www.web3d.org/specifications/x3d-3.0.xsd">
  <head>
    <meta content="flowers3.x3d" name="filename"/>
    <meta content="John Carlson" name="author"/>
    <meta content="John Carlson" name="transcriber"/>
    <meta content="23 January 2005" name="created"/>
    <meta content="2 February 2005" name="revised"/>
    <meta
      content="2 random mathematical roses in spherical dimensions. rho = a + b * cos(c * theta) * cos(d * phi)" name="description"/>
    <meta content="http://coderextreme.net/x3d/flowers3.x3d" name="url"/>
    <meta content="manually written" name="generator"/>
  </head>
  <Scene>
    <NavigationInfo type="&quot;EXAMINE&quot; &quot;ANY&quot;"/>
    <Viewpoint description="Two mathematical orbitals" position="0 0 50"/>
    <Group>
      <DirectionalLight direction="1 1 1"/>
      <Transform DEF="OrbitTransform" translation="8 0 0">
        <Shape>
          <Appearance>
            <Material diffuseColor="0 0.5 1" specularColor="0 0.5 1"/>
          </Appearance>
          <IndexedTriangleStripSet DEF="Orbit">
            <Coordinate DEF="OrbitCoordinates"/>
          </IndexedTriangleStripSet>
        </Shape>
      </Transform>
      <Transform DEF="OrbitTransform2" translation="-8 0 0">
        <Shape>
          <Appearance>
            <Material diffuseColor="1 0.5 0" specularColor="1 0.5 0" transparency="0.75"/>
          </Appearance>
          <IndexedTriangleStripSet DEF="Orbit2">
            <Coordinate DEF="OrbitCoordinates2"/>
          </IndexedTriangleStripSet>
        </Shape>
      </Transform>
      <TimeSensor DEF="Clock" cycleInterval="4" loop="true"/>
      <Script DEF="OrbitScript">
        <field accessType="inputOnly" name="set_fraction" type="SFFloat"/>
        <field accessType="outputOnly" name="coordinates" type="MFVec3f"/>
        <field accessType="outputOnly" name="coordIndexes" type="MFInt32"/>
        <field accessType="outputOnly" name="e" type="SFInt32"/>
        <field accessType="outputOnly" name="f" type="SFInt32"/>
        <field accessType="outputOnly" name="g" type="SFInt32"/>
        <field accessType="outputOnly" name="h" type="SFInt32"/>
        <field accessType="outputOnly" name="cycleInt" type="SFInt32"/>
        <field accessType="outputOnly" name="cyc" type="SFInt32"/>
<![CDATA[

ecmascript:

function initialize() {
     e = 5;
     f = 5;
     g = 5;
     h = 5;
     cycleInt = 4;
     cyc = 0;

     resolution = 100;
     localci = new MFInt32();
     oldcoordinates = new MFVec3f();
     newcoordinates = new MFVec3f();
     generateCoordinates(resolution, 2);
     ci = 0;
     for ( i = 0; i < resolution-1; i++) {
     	for ( j = 0; j < resolution-1; j++) {
	     localci[ci] = i*resolution+j;
	     localci[ci+1] = (i+1)*resolution+j;
	     localci[ci+2] = i*resolution+j+1;
	     ci += 2;
	}
        localci[ci+1] = (i+1)*resolution+j;
        localci[ci+2] = -1;
	ci += 3;
    }
    coordIndexes = localci;
}

function generateCoordinates(resolution, f) {
	if (cyc % cycleInt == 0) {
	     oldcoordinates = newcoordinates;
	     theta = 0.0;
	     phi = 0.0;
	     delta = (2 * 3.141592653) / (resolution-1);
	     localc = new MFVec3f();
	     for ( i = 0; i < resolution; i++) {
		for ( j = 0; j < resolution; j++) {
			rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);
			localc[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
			localc[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
			localc[i*resolution+j][2] = rho * Math.sin(phi);
			theta += delta;
		}
		phi += delta;
	     }
	     newcoordinates = localc;
	     if (f == 2) {
			oldcoordinates = newcoordinates;
	     }
	}
        morphc = new MFVec3f();
	for ( i = 0; i < resolution; i++) {
	  for ( j = 0; j < resolution; j++) {
		morphc[i*resolution+j][0] = (newcoordinates[i*resolution+j][0] - oldcoordinates[i*resolution+j][0])*f + oldcoordinates[i*resolution+j][0];
		morphc[i*resolution+j][1] = (newcoordinates[i*resolution+j][1] - oldcoordinates[i*resolution+j][1])*f + oldcoordinates[i*resolution+j][1];
		morphc[i*resolution+j][2] = (newcoordinates[i*resolution+j][2] - oldcoordinates[i*resolution+j][2])*f + oldcoordinates[i*resolution+j][2];
	  }
	}
	coordinates = morphc;
	cyc++;
}

function set_fraction(fraction, eventTime) {
	if (cyc % cycleInt == 0) {
		choice = Math.floor(Math.random() * 4);
		switch (choice) {
		case 0:
			e += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		case 1:
			f += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		case 2:
			g += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		case 3:
			h += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		}
		if (f < 1) {
			f = 10;
		}
		if (g < 1) {
			g = 4;
		}
		if (h < 1) {
			h = 4;
		}
	}
	resolution = 100;
	generateCoordinates(resolution, fraction);
}
      ]]></Script>
      <Script DEF="OrbitScript2">
        <field accessType="inputOnly" name="set_fraction" type="SFFloat"/>
        <field accessType="outputOnly" name="coordinates" type="MFVec3f"/>
	<field accessType="outputOnly" name="coordIndexes" type="MFInt32"/>
        <field accessType="outputOnly" name="e" type="SFInt32"/>
        <field accessType="outputOnly" name="f" type="SFInt32"/>
        <field accessType="outputOnly" name="g" type="SFInt32"/>
        <field accessType="outputOnly" name="h" type="SFInt32"/>
        <field accessType="outputOnly" name="cycleInt" type="SFInt32"/>
        <field accessType="outputOnly" name="cyc" type="SFInt32"/>
<![CDATA[

ecmascript:

function initialize() {
     e = 5;
     f = 5;
     g = 5;
     h = 5;
     cycleInt = 4;
     cyc = 0;

     resolution = 100;
     localci = new MFInt32();
     oldcoordinates = new MFVec3f();
     newcoordinates = new MFVec3f();
     generateCoordinates(resolution, 2);
     ci = 0;
     for ( i = 0; i < resolution-1; i++) {
     	for ( j = 0; j < resolution-1; j++) {
	     localci[ci] = i*resolution+j;
	     localci[ci+1] = (i+1)*resolution+j;
	     localci[ci+2] = i*resolution+j+1;
	     ci += 2;
	}
        localci[ci+1] = (i+1)*resolution+j;
        localci[ci+2] = -1;
	ci += 3;
    }
    coordIndexes = localci;
}

function generateCoordinates(resolution, f) {
	if (cyc % cycleInt == 0) {
	     oldcoordinates = newcoordinates;
	     theta = 0.0;
	     phi = 0.0;
	     delta = (2 * 3.141592653) / (resolution-1);
	     localc = new MFVec3f();
	     for ( i = 0; i < resolution; i++) {
		for ( j = 0; j < resolution; j++) {
			rho = e + f * Math.cos(g * theta) * Math.cos(h * phi);
			localc[i*resolution+j][0] = rho * Math.cos(phi) * Math.cos(theta);
			localc[i*resolution+j][1] = rho * Math.cos(phi) * Math.sin(theta);
			localc[i*resolution+j][2] = rho * Math.sin(phi);
			theta += delta;
		}
		phi += delta;
	     }
	     newcoordinates = localc;
	     if (f == 2) {
			oldcoordinates = newcoordinates;
	     }
	}
        morphc = new MFVec3f();
	for ( i = 0; i < resolution; i++) {
	  for ( j = 0; j < resolution; j++) {
		morphc[i*resolution+j][0] = (newcoordinates[i*resolution+j][0] - oldcoordinates[i*resolution+j][0])*f + oldcoordinates[i*resolution+j][0];
		morphc[i*resolution+j][1] = (newcoordinates[i*resolution+j][1] - oldcoordinates[i*resolution+j][1])*f + oldcoordinates[i*resolution+j][1];
		morphc[i*resolution+j][2] = (newcoordinates[i*resolution+j][2] - oldcoordinates[i*resolution+j][2])*f + oldcoordinates[i*resolution+j][2];
	  }
	}
	coordinates = morphc;
	cyc++;
}

function set_fraction(fraction, eventTime) {
	if (cyc % cycleInt == 0) {
		choice = Math.floor(Math.random() * 4);
		switch (choice) {
		case 0:
			e += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		case 1:
			f += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		case 2:
			g += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		case 3:
			h += Math.floor(Math.random() * 2) * 2 - 1;
			break;
		}
		if (f < 1) {
			f = 10;
		}
		if (g < 1) {
			g = 4;
		}
		if (h < 1) {
			h = 4;
		}
	}
	resolution = 100;
	generateCoordinates(resolution, fraction);
}
      ]]></Script>
    </Group>
    <ROUTE fromField="coordIndexes" fromNode="OrbitScript"
      toField="set_index" toNode="Orbit"/>
    <ROUTE fromField="coordinates" fromNode="OrbitScript"
      toField="set_point" toNode="OrbitCoordinates"/>
    <ROUTE fromField="coordIndexes" fromNode="OrbitScript2"
      toField="set_index" toNode="Orbit2"/>
    <ROUTE fromField="coordinates" fromNode="OrbitScript2"
      toField="set_point" toNode="OrbitCoordinates2"/>
    <ROUTE fromField="fraction_changed" fromNode="Clock"
      toField="set_fraction" toNode="OrbitScript"/>
    <ROUTE fromField="fraction_changed" fromNode="Clock"
      toField="set_fraction" toNode="OrbitScript2"/>
  </Scene>
</X3D>

