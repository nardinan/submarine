#VRML V2.0 utf8

# taken from http://www.smeenk.com - file sensors8.wrl.
# This is really neat - and it outlined a FreeWRL bug.
# 03/05/2001 John Stewart.
# 04/03/2007 Steven Borley - bug fix

# Information about this scene
WorldInfo {
   title "Multiple sensors"
   info [
	"Description: Multiple sensors to move a box in X, Y and Z direction",
	"Programming by Roland Smeenk",
	"Last modified: 13 may 1998",
   ]
}

# Navigation Info
NavigationInfo {
   headlight FALSE
   speed 0.8
   type "EXAMINE"
}

# First viewpoint
Viewpoint {
   description "Startup camera"
   position 0 0 5
}

# Some lights
PointLight {
   location -10 -20 20
   color 1 1 1
}

PointLight {
   location 25 10 30
   color 1 1 1
}

PointLight {
   location -15 10 -40
   color 1 1 1
}

# A blue line box
Transform {
   children [
	Shape {
 	   geometry IndexedLineSet {

		coord Coordinate {
		   point [ -1 -1 -1, 1 -1 -1, 1 1 -1, -1 1 -1,
				-1 -1 1, 1 -1 1, 1 1 1, -1 1 1 ]
		}

		coordIndex [ 0, 1, 2, 3, 0, -1, 4, 5, 6, 7, 4, -1,
			 	 0, 4, -1, 1, 5, -1, 2, 6, -1, 3, 7, -1]

		colorPerVertex FALSE
		color Color {color [0 0 1]}
		colorIndex [0 0 0 0 0 0]
	   }
      }
   ]
}

# This box can be moved
DEF myBox Transform {
   children [
	Shape {
	   appearance Appearance {
		material Material {
		   diffuseColor 1 0 0
		}
	   }
	   geometry Box { size 0.15 0.15 0.15 }
	}
   ]
}

# X-axis
Transform {
   translation 0 -1 -1
   children [
	DEF mySphereX Transform {
	   children [
		Shape {
		   appearance Appearance {
			material Material {
			   diffuseColor 1 1 0
			}
		   }
		   geometry Sphere { radius 0.1 }
		}
	   ]
	}
	DEF mySensorX PlaneSensor {
	   maxPosition	1 0
	   minPosition	-0.9 0
	   offset		0 0 0
 	}
   ]
}

# Y-axis
Transform {
   translation  -1 0 -1
   children [
	DEF mySphereY Transform {
	   children [
		Shape {
		   appearance Appearance {
			material Material {
			   diffuseColor 1 1 0
			}
		   }
		   geometry Sphere { radius 0.1 }
		}
	   ]
	}
	DEF mySensorY PlaneSensor {
	   maxPosition	0 1
	   minPosition	0 -0.9
	   offset		0 0 0
 	}
   ]
}

# Z-axis
Transform {
   translation -1 -1 0
   rotation 1 0 0 1.57
   children [
	DEF mySphereZ Transform {
	   children [
		Shape {
		   appearance Appearance {
			material Material {
			   diffuseColor 1 1 0
			}
		   }
		   geometry Sphere { radius 0.1 }
		}
		DEF mySensorZ PlaneSensor {
		   maxPosition	0 1
		   minPosition	0 -0.9
		   offset		0 0 0
 		}
	   ]
	}
   ]
}

# Inside this script we combine the movement of the sensors to a new position for the box
DEF myMoverScript Script {
   eventIn SFVec3f DraggedX
   eventIn SFVec3f DraggedY
   eventIn SFVec3f DraggedZ

   eventOut SFVec3f NewBoxPosition

   field SFVec3f currentPosition 0.0 0.0 0.0

   url "javascript:
   function DraggedX(value)
   {
	currentPosition[0] = value[0];
	NewBoxPosition = currentPosition;
   }
   function DraggedY(value)
   {
	currentPosition[1] = value[1];
	NewBoxPosition = currentPosition;
   }
   function DraggedZ(value)
   {
	// We use the Y value from the rotated XY sensor
	currentPosition[2] = value[1];
	NewBoxPosition = currentPosition;
   }
   "
}

# Connect the sensors to their representing objects
ROUTE mySensorX.translation_changed TO mySphereX.set_translation
ROUTE mySensorY.translation_changed TO mySphereY.set_translation
ROUTE mySensorZ.translation_changed TO mySphereZ.set_translation

# Connect the sensors to script also
ROUTE mySensorX.translation_changed TO myMoverScript.DraggedX
ROUTE mySensorY.translation_changed TO myMoverScript.DraggedY
ROUTE mySensorZ.translation_changed TO myMoverScript.DraggedZ

# Send the new position to the box
ROUTE myMoverScript.NewBoxPosition TO myBox.set_translation
